# Day 9: Disk Fragmenter

```elixir
Mix.install([
  {:kino, "~> 0.14.2"}
])
```

## Input

```elixir
input = Kino.Input.textarea("Please, paste your input:")
```

```elixir
defmodule Day9Shared do
  def parse(input) do
    input
    |> Kino.Input.read()
    |> String.codepoints()
    |> Enum.map(&String.to_integer/1)
    |> Enum.chunk_every(2, 2, [0])
    |> Enum.with_index()
  end
end

Day9Shared.parse(input)
```

## Part 1

Another push of the button leaves you in the familiar hallways of some friendly [amphipods](https://adventofcode.com/2021/day/23)! Good thing you each somehow got your own personal mini submarine. The Historians jet away in search of the Chief, mostly by driving directly into walls.

While The Historians quickly figure out how to pilot these things, you notice an amphipod in the corner struggling with his computer. He's trying to make more contiguous free space by compacting all of the files, but his program isn't working; you offer to help.

He shows you the **disk map** (your puzzle input) he's already generated. For example:

```
2333133121414131402
```

The disk map uses a dense format to represent the layout of **files** and **free space** on the disk. The digits alternate between indicating the length of a file and the length of free space.

So, a disk map like `12345` would represent a one-block file, two blocks of free space, a three-block file, four blocks of free space, and then a five-block file. A disk map like `90909` would represent three nine-block files in a row (with no free space between them).

Each file on disk also has an **ID number** based on the order of the files as they appear **before** they are rearranged, starting with ID `0`. So, the disk map `12345` has three files: a one-block file with ID `0`, a three-block file with ID `1`, and a five-block file with ID `2`. Using one character for each block where digits are the file ID and `.` is free space, the disk map `12345` represents these individual blocks:

```
00...111...2...333.44.5555.6666.777.888899
```

The amphipod would like to **move file blocks one at a time** from the end of the disk to the leftmost free space block (until there are no gaps remaining between file blocks). For the disk map `12345`, the process looks like this:

```
0..111....22222
02.111....2222.
022111....222..
0221112...22...
02211122..2....
022111222......
```

The first example requires a few more steps:

```
00...111...2...333.44.5555.6666.777.888899
009..111...2...333.44.5555.6666.777.88889.
0099.111...2...333.44.5555.6666.777.8888..
00998111...2...333.44.5555.6666.777.888...
009981118..2...333.44.5555.6666.777.88....
0099811188.2...333.44.5555.6666.777.8.....
009981118882...333.44.5555.6666.777.......
0099811188827..333.44.5555.6666.77........
00998111888277.333.44.5555.6666.7.........
009981118882777333.44.5555.6666...........
009981118882777333644.5555.666............
00998111888277733364465555.66.............
0099811188827773336446555566..............
```

The final step of this file-compacting process is to update the **filesystem checksum**. To calculate the checksum, add up the result of multiplying each of these blocks' position with the file ID number it contains. The leftmost block is in position `0`. If a block contains free space, skip it instead.

Continuing the first example, the first few blocks' position multiplied by its file ID number are `0 * 0 = 0`, `1 * 0 = 0`, `2 * 9 = 18`, `3 * 9 = 27`, `4 * 8 = 32`, and so on. In this example, the checksum is the sum of these, `1928`.

Compact the amphipod's hard drive using the process he requested. **What is the resulting filesystem checksum?** _(Be careful copy/pasting the input for this puzzle; it is a single, very long line.)_

```elixir
defmodule Day9Part1 do
  def process(disk_map) do
    total_data_blocks =
      Enum.reduce(disk_map, 0, fn {[blocks_n, _], _}, acc -> acc + blocks_n end)

    reversed_blocks =
      disk_map
      |> Enum.reverse()
      |> Enum.map(fn {[blocks_n, _], idx} -> List.duplicate(idx, blocks_n) end)
      |> List.flatten()

    # eventually, we need a list of data blocks ids, e.g. [0, 0, 9, 9, 8, 1, 1, 1, ...]
    disk_map
    |> Enum.reduce_while({[], reversed_blocks}, fn {[blocks_n, empty_n], idx}, {blocks, remaining} ->
      {taken, new_remaining} = Enum.split(remaining, empty_n)
      
      new_blocks = blocks ++ (List.duplicate(idx, blocks_n) ++ taken)

      if new_remaining == [] or length(new_blocks) >= total_data_blocks do
        {:halt, Enum.take(new_blocks, total_data_blocks)}
      else
        {:cont, {new_blocks, new_remaining}}
      end
    end)
    |> List.flatten()
    |> Enum.reduce({0, 0}, fn file_id, {acc, n} ->
      {acc + file_id * n, n + 1}
    end)
    |> elem(0)
  end
end

input |> Day9Shared.parse() |> Day9Part1.process()

# 6337921897505 is the right answer (takes ~0.5 seconds)
```

## Part 2

Upon completion, two things immediately become clear. First, the disk definitely has a lot more contiguous free space, just like the amphipod hoped. Second, the computer is running much more slowly! Maybe introducing all of that [file system fragmentation](https://en.wikipedia.org/wiki/File_system_fragmentation) was a bad idea?

The eager amphipod already has a new plan: rather than move individual blocks, he'd like to try compacting the files on his disk by moving **whole files** instead.

This time, attempt to move whole files to the leftmost span of free space blocks that could fit the file. Attempt to move each file exactly once in order of **decreasing file ID number** starting with the file with the highest file ID number. If there is no span of free space to the left of a file that is large enough to fit the file, the file does not move.

The first example from above now proceeds differently:

```
00...111...2...333.44.5555.6666.777.888899
0099.111...2...333.44.5555.6666.777.8888..
0099.1117772...333.44.5555.6666.....8888..
0099.111777244.333....5555.6666.....8888..
00992111777.44.333....5555.6666.....8888..
```

The process of updating the filesystem checksum is the same; now, this example's checksum would be `2858`.

Start over, now compacting the amphipod's hard drive using this new method instead. **What is the resulting filesystem checksum?**

```elixir
defmodule Day9Part2 do
  def process(disk_map) do
    {files_meta, blocks, _} =
      Enum.reduce(disk_map, {%{}, [], 0}, fn {[file_n, empty_n], file_id},
                                             {files_map, blocks, pos} ->
        new_pos = pos + file_n + empty_n

        new_files_map = Map.put(files_map, file_id, {pos, file_n})

        block = [
          List.duplicate(".", empty_n),
          List.duplicate(file_id, file_n)
        ]

        new_blocks = [block | blocks]

        {new_files_map, new_blocks, new_pos}
      end)

    blocks = blocks |> List.flatten() |> Enum.reverse() |> Enum.with_index()

    files_meta
    |> Map.keys()
    |> Enum.sort(:desc)
    |> Enum.reduce(blocks, fn file_id, blocks ->
      # print_disk(blocks, file_id)

      {file_start, file_size} = Map.get(files_meta, file_id)

      case hole_to_move(blocks, file_size, file_start) do
        :not_found ->
          blocks

        hole_start ->
          # Cut the given list into pieces (to move file to the hole, and make a new hole
          # instead of old file position). Imagine editing a film and cutting it, then
          # glueing new frames into the cuts...
          {starter, tail} = Enum.split(blocks, hole_start + 1)
          {middle, _} = Enum.split(tail, file_start - hole_start - 1)
          {_, middle} = Enum.split(middle, file_size)
          {_, ender} = Enum.split(blocks, file_start + file_size)

          new_file =
            for f <- (hole_start + 1)..(hole_start + file_size),
                do: {file_id, f}

          new_hole =
            for h <- (file_start + 1)..(file_start + file_size),
                do: {".", h}

          starter ++ new_file ++ middle ++ new_hole ++ ender
      end
    end)
    |> Enum.reduce(0, fn
      {".", _}, checksum -> checksum
      {file_id, block_id}, checksum -> checksum + file_id * block_id
    end)
  end

  def hole_to_move(blocks, file_size, file_start) do
    Enum.reduce_while(blocks, {0, :not_found}, fn {block, idx}, {hole_size, hole_start} ->
      new_hole_size = if block == ".", do: hole_size + 1, else: 0
      new_hole_start = idx - new_hole_size

      if new_hole_size >= file_size && new_hole_start <= file_start do
        {:halt, {new_hole_size, new_hole_start}}
      else
        {:cont, {new_hole_size, hole_start}}
      end
    end)
    |> elem(1)
  end

  # defp print_disk(blocks, file_id) do
  #   blocks
  #   |> Enum.map(&elem(&1, 0))
  #   |> Enum.join()
  #   |> IO.inspect(label: "disk@#{file_id}")
  # end

  # Solution like that took ~20-22 seconds instead of ~8-9 with "film editing" cuts approach
  # (leaving it here just for information purposes)
  #
  # defp swap(list, i1, i2) do
  #   val1 = Enum.at(list, i1) |> put_elem(1, i2)
  #   val2 = Enum.at(list, i2) |> put_elem(1, i1)
  #
  #   list
  #   |> List.replace_at(i1, val2)
  #   |> List.replace_at(i2, val1)
  # end
end

input |> Day9Shared.parse() |> Day9Part2.process()

# 8554502838210 is to high
# 8564936405055 is to high
# 6362722604045 is the right answer (takes 8.5â€“9 seconds)
```
